#!/bin/bash

assert () {
  sleepCount=0
  while [ "$sleepCount" -le "30" ] && output=`eval $2`; do
    if [ "$output" == "$3" ]; then
      printf -- "\033[32mTest passed!\033[0m $1: got expected value $3.\n"
      return
    fi
    sleepCount=$((sleepCount+1))
    sleep 1
  done
  printf -- "\033[31mTEST FAILED!\033[0m $1: expected $3, actual $output; while evaluating '$2'.\n"
  exit 1
}

waitFor () {
  [ -z "$2" ] && timeout=60 || timeout=$2
  sleepCount=0
  while [ "$sleepCount" -le "$timeout" ] && ! eval "$1" >/dev/null; do
      sleep 1
      sleepCount=$((sleepCount+1))
  done

  if [ "$sleepCount" -gt "$timeout" ]; then
    printf -- "\033[31mTimed out waiting for '$1' (waited ${timeout}s).\033[0m\n"
    exit 1
  fi
}

waitForResponse () {
  title "Waiting for $1."
  waitFor "curl -s \"$1\""
  title "Service on $1 is ready."
}

launch_gethnet() {
  printf -- "\033[34m%-50s\033[0m" "Checking for running ethereum node"
  if curl -s $ETH_HTTP_URL >/dev/null; then
    printf -- "[\033[32mrunning\033[0m]\n"
    return
  fi
  printf -- "[\033[31mstopped\033[0m]\n"

  title "Starting geth..."
  $SRCROOT/tools/bin/gethnet &>$SRCROOT/integration/gethnet.log &
  waitForResponse $ETH_HTTP_URL
  title "Geth is running."
}

launch_parity() {
  printf -- "\033[34m%-50s\033[0m" "Checking for running ethereum node"
  if curl -s $ETH_HTTP_URL >/dev/null; then
    printf -- "[\033[32mrunning\033[0m]\n"
    return
  fi
  printf -- "[\033[31mstopped\033[0m]\n"

  title "Starting parity..."
  $SRCROOT/tools/bin/devnet &>$SRCROOT/integration/devnet.log &
  waitForResponse $ETH_HTTP_URL
  title "Parity is running."
}

install_chainlink() {
  if [ -x "$(which chainlink)" ]; then
    return
  fi

  title "Making chainlink..."
  make install &>$SRCROOT/integration/make.log
}

launch_chainlink() {
  chainlink_url="http://127.0.0.1:6688"
  printf -- "\033[34m%-50s\033[0m" "Checking for local chainlink"
  if curl -s $chainlink_url >/dev/null; then
    printf -- "[\033[32mrunning\033[0m]\n"
    return
  fi
  printf -- "[\033[31mstopped\033[0m]\n"

  install_chainlink

  title "Starting chainlink..."

  clroot=$(mktemp -d)
  trap "rm -rf $clroot" EXIT HUP TERM INT
  cp $SRCROOT/tools/clroot/{password.txt,apicredentials} $clroot/
  echo running chainlink from ${clroot}
  chainlink node start -d -p $clroot/password.txt -a $clroot/apicredentials &>$SRCROOT/integration/chainlink.log &

  waitForResponse $chainlink_url
  title "Chainlink is running."

  waitFor "grep 'Unlocked account' '$SRCROOT/integration/chainlink.log'" 10
  export CHAINLINK_NODE_ADDRESS=`cat $SRCROOT/integration/chainlink.log | grep 'Unlocked account' | awk '{print$5}'`

  yarn workspace @chainlink/integration run truffle exec scripts/fund_address.js --network test "$CHAINLINK_NODE_ADDRESS" > $SRCROOT/integration/fund_address.log
}

launch_explorer() {
  explorer_url="http://127.0.0.1:8080"
  printf -- "\033[34m%-50s\033[0m" "Checking for explorer"
  if curl -s $explorer_url >/dev/null; then
    printf -- "[\033[32mrunning\033[0m]\n"
    return
  fi
  printf -- "[\033[31mstopped\033[0m]\n"
  title "Starting explorer..."

  yarn install
  yarn workspace @chainlink/explorer run build &>$SRCROOT/integration/explorer-yarn.log
  yarn workspace @chainlink/explorer run prod &>$SRCROOT/integration/explorer.log & waitForResponse $explorer_url
  title "Explorer is running."
}

add_clnode_to_explorer() {
  title "Adding CL Node to Explorer..."

  clnode_name="test-$(date +%s)"
  response=`yarn workspace @chainlink/explorer run admin:clnodes:add $clnode_name`
  export EXPLORER_ACCESS_KEY=$(echo $response | grep -o "AccessKey [a-zA-Z0-9]*" | awk '{print $2}')
  export EXPLORER_SECRET=$(echo $response | grep -o "Secret [a-zA-Z0-9]*" | awk '{print $2}')
  export EXPLORER_URL="ws://localhost:8080"
  title "Added CL Node $clnode_name to Explorer."
}

deploy_contracts() {
  title "Migrating core contracts..."
  pushd integration >/dev/null

  yarn --no-progress install &>$SRCROOT/integration/yarn.log

  # run migrations
  yarn workspace @chainlink/integration truffle:migrate | tee $SRCROOT/integration/deploy.log
  export LINK_TOKEN_ADDRESS=`cat $SRCROOT/integration/deploy.log | grep 'Deployed LinkToken at:' | awk '{print$4}'`
  export ORACLE_CONTRACT_ADDRESS=`cat $SRCROOT/integration/deploy.log | grep 'Deployed Oracle at:' | awk '{print$4}'`
  export ETH_LOG_ADDRESS=`cat $SRCROOT/integration/deploy.log | grep 'Deployed EthLog at:' | awk '{print$4}'`
  export RUN_LOG_ADDRESS=`cat $SRCROOT/integration/deploy.log | grep 'Deployed RunLog at:' | awk '{print$4}'`

  echo "RunLog address: $RUN_LOG_ADDRESS"
  popd >/dev/null
  title "Migration complete."
}

launch_echo_server() {
  printf -- "\033[34m%-50s\033[0m" "Checking for local echo server"
  if curl -s $ECHO_SERVER_URL >/dev/null; then
    printf -- "[\033[32mrunning\033[0m]\n"
    return
  fi
  printf -- "[\033[31mstopped\033[0m]\n"

  title "Starting echo server..."
  pushd integration >/dev/null

  ./echo_server "$ECHO_SERVER_PORT" &>$SRCROOT/integration/echo-server.log &
  waitForResponse $ECHO_SERVER_URL

  popd >/dev/null
  title "Echo server is running."
}

print_logs() {
  for log in $(find "$SRCROOT/integration" -maxdepth 1 -type f -iname '*.log'); do
    heading "$log"
    cat $log
  done
}

exit_handler() {
  errno=$?
  # Print all the logs if the test fails
  if [ $errno -ne 0 ]; then
    title "ABORTING TEST"
    printf -- "Exited with code $errno\n"
    print_logs
  fi
  exit $errno
}

cleanup() {
  if [ -n "$CIRCLECI" ]; then
    return
  fi

  # Kill all child subprocesses
  pkill -P $$
}

title() {
  printf -- "\033[34m$1\033[0m\n"
}

heading() {
  printf -- "\n--------------------------------------------------------------------------------\n"
  title "$1"
  printf -- "--------------------------------------------------------------------------------\n\n"
}
