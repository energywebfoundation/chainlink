// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import big "math/big"
import mock "github.com/stretchr/testify/mock"
import models "github.com/smartcontractkit/chainlink/core/store/models"

// JobManager is an autogenerated mock type for the JobManager type
type JobManager struct {
	mock.Mock
}

// CancelTask provides a mock function with given fields: runID
func (_m *JobManager) CancelTask(runID *models.ID) error {
	ret := _m.Called(runID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ID) error); ok {
		r0 = rf(runID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteJob provides a mock function with given fields: jobSpecID, initiator, input, creationHeight
func (_m *JobManager) ExecuteJob(jobSpecID *models.ID, initiator *models.Initiator, input *models.RunResult, creationHeight *big.Int) (*models.JobRun, error) {
	ret := _m.Called(jobSpecID, initiator, input, creationHeight)

	var r0 *models.JobRun
	if rf, ok := ret.Get(0).(func(*models.ID, *models.Initiator, *models.RunResult, *big.Int) *models.JobRun); ok {
		r0 = rf(jobSpecID, initiator, input, creationHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobRun)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.ID, *models.Initiator, *models.RunResult, *big.Int) error); ok {
		r1 = rf(jobSpecID, initiator, input, creationHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteJobWithRunRequest provides a mock function with given fields: jobSpecID, initiator, input, creationHeight, runRequest
func (_m *JobManager) ExecuteJobWithRunRequest(jobSpecID *models.ID, initiator *models.Initiator, input *models.RunResult, creationHeight *big.Int, runRequest *models.RunRequest) (*models.JobRun, error) {
	ret := _m.Called(jobSpecID, initiator, input, creationHeight, runRequest)

	var r0 *models.JobRun
	if rf, ok := ret.Get(0).(func(*models.ID, *models.Initiator, *models.RunResult, *big.Int, *models.RunRequest) *models.JobRun); ok {
		r0 = rf(jobSpecID, initiator, input, creationHeight, runRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobRun)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.ID, *models.Initiator, *models.RunResult, *big.Int, *models.RunRequest) error); ok {
		r1 = rf(jobSpecID, initiator, input, creationHeight, runRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeConfirmingTasks provides a mock function with given fields: currentBlockHeight
func (_m *JobManager) ResumeConfirmingTasks(currentBlockHeight *big.Int) error {
	ret := _m.Called(currentBlockHeight)

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int) error); ok {
		r0 = rf(currentBlockHeight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResumeConnectingTasks provides a mock function with given fields:
func (_m *JobManager) ResumeConnectingTasks() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResumePendingTask provides a mock function with given fields: runID, input
func (_m *JobManager) ResumePendingTask(runID *models.ID, input models.RunResult) error {
	ret := _m.Called(runID, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ID, models.RunResult) error); ok {
		r0 = rf(runID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
